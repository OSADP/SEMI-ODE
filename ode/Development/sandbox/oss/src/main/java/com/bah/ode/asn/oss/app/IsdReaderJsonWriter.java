/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.7.4, Date: 23-Dec-2014.
 */
package com.bah.ode.asn.oss.app;

import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.nio.ByteBuffer;
import java.util.Scanner;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import com.bah.ode.asn.oss.Oss;
import com.bah.ode.asn.oss.semi.IntersectionRecord;
import com.bah.ode.asn.oss.semi.IntersectionSituationData;
import com.google.gson.Gson;
import com.oss.asn1.Coder;
import com.oss.util.HexTool;

public class IsdReaderJsonWriter {

   private static Logger logger = Logger.getLogger(IsdReaderJsonWriter.class
         .getName());

   public static void main(String args[]) {
      String filename = new String("message.dat");

      // Process command line arguments
      if (args.length > 0) {
         for (int i = 0; i < args.length; i++) {
            if (args[i].equals("-i"))
               filename = new String(args[++i]);
            else {
               System.out.println("usage: Reader [ -i <filename>");
               System.out.println("   -i <filename>  ");
               System.out.println("   -trace display trace info");
               System.exit(1);
            }
         }
      }

      Coder coder = Oss.getBERCoder();
      try {
         FileHandler handler = new FileHandler(filename + ".log", true);
         SimpleFormatter formatter = new SimpleFormatter();
         handler.setFormatter(formatter);
         logger.addHandler(handler);

         logger.info("\n*** BER DECODING BEGIN ***\n");
         long decodeTime = System.currentTimeMillis();
         PrintWriter jsonOut = new PrintWriter(new PrintStream(filename
               + ".json"));
         int numPDUs = 0;

         Gson gson = new Gson();

         Scanner scanner = new Scanner(new File(filename));
         while (scanner.hasNext()) {
            String s = scanner.next();
            byte[] binData = HexTool.parseHex(s, true);
            ByteBuffer bb = ByteBuffer.wrap(binData);
            
            IntersectionSituationData value = (IntersectionSituationData) coder
                  .decode(bb, new IntersectionSituationData());
            
            IntersectionRecord isr = value.getIntersectionRecord();
            
            jsonOut.println(gson.toJson(isr));
         }

         scanner.close();

         jsonOut.close();
         
         decodeTime = System.currentTimeMillis() - decodeTime;

         logger.info("Number of PDUs: " + numPDUs);
         logger.info("Decode Time: " + decodeTime + " ms");
         logger.info("Decode Rate: "
               + (int) (numPDUs / ((double) decodeTime / 1000)) + " PDUs/sec");

      } catch (Exception e) {
         System.out.println(e.getMessage());
         e.printStackTrace();
         System.exit(1);
      } finally {
      }
   }
}
